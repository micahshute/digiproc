RSpec.describe Dsp::FFT do

    let(:eqn1) do
        ->(n){ Math.cos(n * (1.0/10) * Math::PI)}
    end

    let(:eqn1_size) do
        64
    end

    let(:range) do
        (1..eqn1_size).to_a
    end

    let(:eqn1_fft) do
        [
            Complex(2.65687575733752, 0), Complex(2.89490454531175, 1.05623861949702),
            Complex(4.06675544112370, 3.12057913583346), Complex(18.6206713787602, 23.4607075248439),
            Complex(-3.45289686180958, -6.69598905683325), Complex(-1.06873089727385, -3.24237581909468),
            Complex(-0.417234596452372, -2.20918291523614), Complex(-0.124107274493973, -1.69434767851828),
            Complex(0.0378858654076158, -1.37835466733456),	Complex(0.138379088467931, -1.16081779353782), 
            Complex(0.205575164207214, -0.999749708551553),	Complex(0.252948107901573, -0.874324887367059),
            Complex(0.287689057453915, -0.772962051256015),	Complex(0.313955473907545, -0.688667621886765),
            Complex(0.334301379764437, -0.616947053368878),	Complex(0.350372551635946, -0.554767426853916),
            Complex(0.363271264002680, -0.500000000000003),	Complex(0.373759669157643, -0.451101270745941),
            Complex(0.382378984239081, -0.406920911367781), Complex(0.389522294327164, -0.366581060361554),	
            Complex(0.395480610262053, -0.329397665020533),	Complex(0.400472894783644, -0.294827602762119),
            Complex(0.404666151239032, -0.262432149582308),	Complex(0.408189168792426, -0.231851121562525),
            Complex(0.411142111171973, -0.202784162749620),	Complex(0.413603316912608, -0.174976923001266),	
            Complex(0.415634187553952, -0.148210643843012),	Complex(0.417282737166011, -0.122294155186444),
            Complex(0.418586184923703, -0.0970575962472737), Complex(0.419572848332432, -0.0723473766715514),
            Complex(0.420263512367843, -0.0480220280813517), Complex(0.420672393712994, -0.0239486857952168),
            Complex(0.420807779837732, 0), Complex(0.420672393712994, 0.0239486857952168),
            Complex(0.420263512367843, 0.0480220280813517),	Complex(0.419572848332432, 0.0723473766715514),
            Complex(0.418586184923703, 0.0970575962472737),	Complex(0.417282737166011, 0.122294155186444),
            Complex(0.415634187553952, 0.148210643843012), Complex(0.413603316912608, 0.174976923001266),
            Complex(0.411142111171973, 0.202784162749620), Complex(0.408189168792426, 0.231851121562525),	
            Complex(0.404666151239032, 0.262432149582308), Complex(0.400472894783644, 0.294827602762119),	
            Complex(0.395480610262053, 0.329397665020533), Complex(0.389522294327164, 0.366581060361554),	
            Complex(0.382378984239081, 0.406920911367781), Complex(0.373759669157643, 0.451101270745941),	
            Complex(0.363271264002680, 0.500000000000003), Complex(0.350372551635946, 0.554767426853916),	
            Complex(0.334301379764437, 0.616947053368878), Complex(0.313955473907545, 0.688667621886765),	
            Complex(0.287689057453915, 0.772962051256015), Complex(0.252948107901573, 0.874324887367059),	
            Complex(0.205575164207214, 0.999749708551553), Complex(0.138379088467931, 1.16081779353782),
            Complex(0.0378858654076158, 1.37835466733456), Complex(-0.124107274493973, 1.69434767851828),	
            Complex(-0.417234596452372, 2.20918291523614), Complex(-1.06873089727385, 3.24237581909468),	
            Complex(-3.45289686180958, 6.69598905683325), Complex(18.6206713787602, -23.4607075248439),	
           Complex(4.06675544112370, -3.12057913583346), Complex(2.89490454531175, -1.05623861949702)
        ].map{ |val| Complex(val.real.round(5), val.imag.round(5)) }
    
    end

    it "correctly calculates the fft" do 
        data = range.map{ |n| eqn1.call(n) }
        expect(Dsp::FFT.new(data: data).calculate.map do |val|
            val.is_a?(Complex) ? Complex(val.real.round(5), val.imag.round(5)) : val.round(5)
        end
            ).to eq(eqn1_fft)
    end

    it "can process data through a window before fft" do
        expect(Dsp::FFT.new(data: data).process_with_window.map do |val|
            val.is_a?(Complex) ? Complex(val.real.round(5), val.imag.round(5)) : val.round(5)
        end
            ).to eq(false)

    end

    it "can calculate magnitude of its values" do

    end

    it "can calculate angle of its values" do 

    end

    it "can caclulate db of its values" do

    end

    it "can find the top n maxima in the calculated fft" do

    end

    
end